}
View(find.std.residual)
find.std.residual <- function(county.data, variable, null.prob) {
# Calculate expected null outcomes
expected_null <- county.data$population * null.prob
# Calculate variance under null hypothesis
variance_null <- county.data$population * null.prob * (1 - null.prob)
# Calculate residual
residual <- county.data[[variable]] - expected_null
# Calculate standardized residual
std_residual <- residual / sqrt(variance_null)
# Create a data frame with additional columns
result <- data.frame(county.data,
expected_null = expected_null,
variance_null = variance_null,
residual = residual,
std_residual = std_residual)
# Sort the data frame by standardized residual in decreasing order
result <- result[order(-result$std_residual), ]
return(result)
}
View(result)
find.std.residual <- function(county.data, variable, null.prob) {
# Calculate expected null outcomes
expected_null <- county.data$population * null.prob
# Calculate variance under null hypothesis
variance_null <- county.data$population * null.prob * (1 - null.prob)
# Calculate residual
residual <- county.data[[variable]] - expected_null
# Calculate standardized residual
std_residual <- residual / sqrt(variance_null)
# Create a data frame with additional columns
result <- data.frame(county.data,
expected_null = expected_null,
variance_null = variance_null,
residual = residual,
std_residual = std_residual)
# Sort the data frame by standardized residual in decreasing order
result <- result[order(-result$std_residual), ]
return(result)
}
View(find.std.residual)
std_residual_result <- find.std.residual(county.data, "violent.crimes", 0.05)
std_residual_result
View(std_residual_result)
map.std.residual <- function(county.gg, county.data) {
# Merge county.gg with county.data
plot_data <- merge(county.gg, county.data, by.x = "fips", by.y = "STCOU")
merged_data <- merge(df1, df2, by.x = "name", by.y = "name")
# Create the choropleth plot
map <- ggplot() +
geom_polygon(data = plot_data, aes(x = long, y = lat, group = group, fill = std.residual)) +
scale_fill_gradient2() +  # Customize the color scale if needed
labs(title = "Choropleth Plot of Standardized Residuals",
fill = "Standardized Residual")  # Customize the labels if needed
return(map)
}
# Using the function to create a choropleth plot of the results from problem 3
choropleth_plot <- map.std.residual(county.gg, result_table)  # Assuming county.gg is the spatial data for counties
map.std.residual <- function(county.gg, county.data) {
# Merge county.gg with county.data
plot_data <- merge(county.gg, county.data, by.x = "fips", by.y = "STCOU")
merged_data <- merge(df1, df2, by.x = "name", by.y = "name")
# Create the choropleth plot
map <- ggplot() +
geom_polygon(data = plot_data, aes(x = long, y = lat, group = group, fill = std.residual)) +
scale_fill_gradient2() +  # Customize the color scale if needed
labs(title = "Choropleth Plot of Standardized Residuals",
fill = "Standardized Residual")  # Customize the labels if needed
return(map)
}
# Using the function to create a choropleth plot of the results from problem 3
choropleth_plot <- map.std.residual(county.gg, result)  # Assuming county.gg is the spatial data for counties
map.std.residual <- function(county.gg, county.data) {
# Merge county.gg with county.data
plot_data <- merge(county.gg, county.data, by.x = "fips", by.y = "STCOU")
merged_data <- merge(df1, df2, by.x = "name", by.y = "name")
# Create the choropleth plot
map <- ggplot() +
geom_polygon(data = plot_data, aes(x = long, y = lat, group = group, fill = std.residual)) +
scale_fill_gradient2() +  # Customize the color scale if needed
labs(title = "Choropleth Plot of Standardized Residuals",
fill = "Standardized Residual")  # Customize the labels if needed
return(map)
}
# Using the function to create a choropleth plot of the results from problem 3
choropleth_plot <- map.std.residual(county.gg, county.data)  # Assuming county.gg is the spatial data for counties
map.std.residual <- function(county.gg, county.data) {
# Merge county.gg with county.data
plot_data <- merge(county.gg, county.data, by.x = "fips", by.y = "STCOU")
merged_data <- merge(df1, df2, by.x = "name", by.y = "name")
# Create the choropleth plot
map <- ggplot() +
geom_polygon(data = plot_data, aes(x = long, y = lat, group = group, fill = std.residual)) +
scale_fill_gradient2() +  # Customize the color scale if needed
labs(title = "Choropleth Plot of Standardized Residuals",
fill = "Standardized Residual")  # Customize the labels if needed
return(map)
}
std_residual_result <- find.std.residual(county.data, "violent.crimes", 0.01)
std_residual_result
View(std_residual_result)
std_residual_result <- find.std.residual(county.data, "violent.crimes", 0.01)
std_residual_result
std_residual_result <- find.std.residual(county.data, "violent.crimes", 0.01)
std_residual_result
head(std_residual_result)
find.std.residual <- function(county.data, variable, null.prob) {
# extract the column that we want to compute CI from
values = county.data[, variable]
# compute the CIs
CI.data = with(county.data, binom.confint(x = values, n = population, methods = 'exact'))
# add the ICs to county.data
county.augment = with(CI.data, mutate(county.data, lower.CI = lower, upper.CI = upper, per.capita = mean))
# calculate expected null, variance null, residuals, and std residuals
county.augment = mutate(county.augment,
expected.null = population * null.prob,
variance.null = population * null.prob * (1 - null.prob),
residual = values - expected.null,
std.residual = residual / sqrt(variance.null))
# sort the data by std residuals in descending order
county.augment = arrange(county.augment, desc(std.residual))
# return the augmented and sorted data frame
return(county.augment)
}
std_residual_result <- find.std.residual(county.data, "violent.crimes", 0.01)
std_residual_result
head(std_residual_result)
std_residual_result <- find.std.residual(county.data, "violent.crimes", 0.01)
std_residual_result
head(std_residual_result)
top_15_counties <- head(result[order(-result$std.residual), c('name', 'violent.crimes', 'std.residual')], 15)
std_residual_result <- find.std.residual(county.data, "violent.crimes", 0.01)
std_residual_result
head(std_residual_result)
top_15_counties <- head(std_residual_result[order(-std_residual_result$std.residual), c('name', 'violent.crimes', 'std.residual')], 15)
print(top_15_counties)
std_residual_result <- find.std.residual(county.data, "violent.crimes", 0.01)
head(std_residual_result)
top_15_counties <- head(std_residual_result[order(-std_residual_result$std.residual), c('name', 'violent.crimes', 'std.residual')], 15)
print(top_15_counties)
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
county.data = mutate(county.data,
violent.crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Create scatterplot
ggplot(data = county.data, aes(x = log(population), y = violent.crimes.per.capita)) +
geom_point(color = "lightgreen", size = 1) +
labs(x = "Log Population",
y = "Violent Crime Rate Per Capita",
title = "Figure 1: Scatterplot of Violent Crime Rate Per Capita vs Log Population") +
theme_minimal()
ggplot(data = county.data, aes(x = log(population), y = births.per.capita)) +
geom_point(color = "lightgreen", size = 1) +
labs(x = "Log Population",
y = "Birth Rate Per Capita",
title = "Figure 2: Scatterplot of Birth rate per Capita vs Log Population") +
theme_minimal()
ggplot(data = county.data, aes(x = log(population), y = deaths.per.capita)) +
geom_point(color = "lightgreen", size = 2) +
labs(x = "Log Population",
y = "Death Rate Per Capita",
title = "Figure 3: Scatterplot of Death rate per Capita vs Log Population") +
theme_minimal()
ggplot(data = county.data, aes(x = log(population), y = infant.deaths.per.capita)) +
geom_point(color = "lightgreen", size = 2) +
labs(x = "Log Population",
y = "Infant Death Rate Per Capita",
title = "Figure 4: Scatterplot of Infant Death rate per Capita vs Log Population") +
theme_minimal()
find.std.residual <- function(county.data, variable, null.prob) {
# Extract the column we want:
values = county.data[, variable]
# Compute the Confidence Interval:
CI.data = with(county.data, binom.confint(x = values, n = population, methods = 'exact'))
# Add the CIs, such as low confidence intervals and high confidence intervals to county.data with the per capita as mean:
county.augment = with(CI.data, mutate(county.data, lower.CI = lower, upper.CI = upper, per.capita = mean))
# calculate expected null, variance null, residuals, and std residuals
county.augment = mutate(county.augment,
expected.null = population * null.prob,
variance.null = population * null.prob * (1 - null.prob),
residual = values - expected.null,
std.residual = residual / sqrt(variance.null))
# sort the data by std residuals in descending order
county.augment = arrange(county.augment, desc(std.residual))
# return the augmented and sorted data frame
return(county.augment)
}
std_residual_result <- find.std.residual(county.data, "violent.crimes", 0.01)
head(std_residual_result)
top_15_counties <- head(std_residual_result[order(-std_residual_result$std.residual), c('name', 'violent.crimes', 'std.residual')], 15)
print(top_15_counties)
map.std.residual <- function(county.gg, county.data) {
# Merge county.gg with county.data
plot_data <- merge(county.gg, county.data, by.x = "fips", by.y = "STCOU")
merged_data <- merge(df1, df2, by.x = "name", by.y = "name")
# Create the choropleth plot
map <- ggplot() +
geom_polygon(data = plot_data, aes(x = long, y = lat, group = group, fill = std.residual)) +
scale_fill_gradient2() +  # Customize the color scale if needed
labs(title = "Choropleth Plot of Standardized Residuals",
fill = "Standardized Residual")  # Customize the labels if needed
return(map)
}
# fill in
map.std.residual <- function(county.gg, county.data) {
# Merge county.gg with county.data
plot_data <- merge(county.gg, county.data, by.x = "fips", by.y = "STCOU")
merged_data <- merge(df1, df2, by.x = "name", by.y = "name")
# Create the choropleth plot
map <- ggplot() +
geom_polygon(data = plot_data, aes(x = long, y = lat, group = group, fill = std.residual)) +
scale_fill_gradient2() +  # Customize the color scale if needed
labs(title = "Choropleth Plot of Standardized Residuals",
fill = "Standardized Residual")  # Customize the labels if needed
return(map)
}
# define a function. since the county.data is the assigned data set, so actually this function can be used on only county.data data set. the first item after the funtion is county.data.
find.std.residual <- function(county.data, variable, null.prob){
# use mutate() to add new columns on the exsisting data frame county.data. use with() to make life easier
new.data <- with(county.data,(mutate(county.data,
# expected.null is the fixed value, if the null.prob is given.
expected.null = population * null.prob,
# use (p(1-p))^0.5 to calculate the sd in a binomial question
std.dev.null = sqrt(population * null.prob * (1 - null.prob)),
# compute the residual and std.residual
residual = variable - expected.null,
std.residual = residual/std.dev.null)))
# arrange the data by std.residual from high to low
new.data <- arrange(new.data, desc(std.residual))
#return the data frame
new.data
}
kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
library(kableExtra)
install.packages("kableExtra")
kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
library(kableExtra)
# Extracting the head of the processed data
processed_data <- head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15)
# Formatting the data with kable and kableExtra
formatted_table <- kable(processed_data, align = "c", caption = "Standard Residuals for Violent Crimes", col.names = c("County", "Population", "Violent Crimes", "Std. Residual"))
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
library(kableExtra)
kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
table(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
kable_as_xml(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15)
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15), align = "c")
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 1))
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
find.std.residual <- function(county.data, variable, null.prob){
# Let's use 'with' function to add necessary columns to our dataframe county.data:
new.data <- with(county.data,(mutate(county.data,
# expected.null for our given null.prob multiplied by population of each county:
expected.null = population * null.prob,
# use (p(1-p))^0.5 to calculate the sd in a binomial question
variance.null = (population * null.prob * (1 - null.prob)),
# compute the residual and std.residual
residual = variable - expected.null,
std.residual = residual/variance.null)))
# arrange the data by std.residual from high to low
new.data <- arrange(new.data, desc(std.residual))
#return the data frame
new.data
}
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
find.std.residual <- function(county.data, variable, null.prob){
# Let's use 'with' function to add necessary columns to our dataframe county.data:
new.data <- with(county.data,(mutate(county.data,
# expected.null for our given null.prob multiplied by population of each county:
expected.null = population * null.prob,
# variance.null to get the average null.prob per population for each county:
variance.null = (population * null.prob * (1 - null.prob)),
# Get the residual by subtracting the variable to expected.null:
residual = variable - expected.null,
# Get the std.residual by dividing residual to variance.null:
std.residual = residual/variance.null)))
# Let's sort the std.residual to descending:
result.data <- arrange(new.data, desc(std.residual))
# return the produced data frame
result.data
}
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
processed_data <- head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15)
# Formatting the data with kable
formatted_table <- kable(processed_data, align = "c", caption = "Standard Residuals for Violent Crimes")
# Apply further formatting if desired
formatted_table %>%
kable_styling(full_width = FALSE)
row_spec(0, bold = TRUE) %>%
column_spec(1, bold = TRUE)
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
processed_data <- head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15)
# Formatting the data with kable
formatted_table <- kable(processed_data, align = "c", caption = "Standard Residuals for Violent Crimes")
# Apply further formatting if desired
formatted_table %>%
kable_styling(full_width = FALSE)
processed_data <- head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15)
# Formatting the data with kable
formatted_table <- kable(processed_data, align = "c", caption = "Standard Residuals for Violent Crimes")
# Apply further formatting if desired
formatted_table %>%
kable_styling(full_width = FALSE)
knitr::kable(head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15))
head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15) %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = TRUE)
library(ggplot2)
library(plyr)
library(reshape2)
library(knitr)
library(binom)
library(kableExtra)
county.data = read.csv(file = 'county_data.csv', header=TRUE)
load('county_ggplot.rda')
county.data = mutate(county.data,
violent.crimes.per.capita = violent.crimes / population,
births.per.capita = births / population,
deaths.per.capita = deaths / population,
infant.deaths.per.capita = infant.deaths / population)
# Create scatterplot
ggplot(data = county.data, aes(x = log(population), y = violent.crimes.per.capita)) +
geom_point(color = "lightgreen", size = 1) +
labs(x = "Log Population",
y = "Violent Crime Rate Per Capita",
title = "Figure 1: Scatterplot of Violent Crime Rate Per Capita vs Log Population") +
theme_minimal()
ggplot(data = county.data, aes(x = log(population), y = births.per.capita)) +
geom_point(color = "lightgreen", size = 1) +
labs(x = "Log Population",
y = "Birth Rate Per Capita",
title = "Figure 2: Scatterplot of Birth rate per Capita vs Log Population") +
theme_minimal()
ggplot(data = county.data, aes(x = log(population), y = deaths.per.capita)) +
geom_point(color = "lightgreen", size = 2) +
labs(x = "Log Population",
y = "Death Rate Per Capita",
title = "Figure 3: Scatterplot of Death rate per Capita vs Log Population") +
theme_minimal()
ggplot(data = county.data, aes(x = log(population), y = infant.deaths.per.capita)) +
geom_point(color = "lightgreen", size = 2) +
labs(x = "Log Population",
y = "Infant Death Rate Per Capita",
title = "Figure 4: Scatterplot of Infant Death rate per Capita vs Log Population") +
theme_minimal()
find.std.residual <- function(county.data, variable, null.prob){
# Let's use 'with' function to add necessary columns to our dataframe county.data:
new.data <- with(county.data,(mutate(county.data,
# expected.null for our given null.prob multiplied by population of each county:
expected.null = population * null.prob,
# variance.null to get the average null.prob per population for each county:
variance.null = (population * null.prob * (1 - null.prob)),
# Get the residual by subtracting the variable to expected.null:
residual = variable - expected.null,
# Get the std.residual by dividing residual to variance.null:
std.residual = residual/variance.null)))
# Let's sort the std.residual to descending:
result.data <- arrange(new.data, desc(std.residual))
# return the produced data frame
result.data
}
head(find.std.residual(county.data, county.data$violent.crimes, 0.01), 15) %>%
kbl() %>%
kable_styling(bootstrap_options = c("striped", "hover"), full_width = TRUE)
map.std.residual <- function(county.gg, county.data) {
# Merge county.gg with county.data
plot_data <- merge(county.gg, county.data, by.x = "fips", by.y = "STCOU")
merged_data <- merge(df1, df2, by.x = "name", by.y = "name")
# Create the choropleth plot
map <- ggplot() +
geom_polygon(data = plot_data, aes(x = long, y = lat, group = group, fill = std.residual)) +
scale_fill_gradient2() +  # Customize the color scale if needed
labs(title = "Choropleth Plot of Standardized Residuals",
fill = "Standardized Residual")  # Customize the labels if needed
return(map)
}
# fill in
map.std.residual <- function(county.gg, county.data){
# use the function above to generate the data frame with information about std.residual
new.data <- find.std.residual(county.data, county.data$violent.crimes, 0.01)
# merge the violent crime information with the map file
county.mapdata <- merge(county.gg, new.data, by.x = 'fips', by.y='STCOU')
# make the mapg
ggplot(data = county.mapdata, mapping=aes(x = long, y = lat, group = group, fill = std.residual)) +
# add boundries across counties
geom_polygon(color = 'white', size = 0.5) +
scale_fill_gradient2(low = 'blue', mid = 'grey', high = 'red', midpoint = 0) +
coord_map() +
labs(title = 'Risk of Violent Crime over counties \n United States', x = '', y = '') +
# make the title in the middle of the graph
theme(plot.title = element_text(hjust = 0.5))
}
# generate the choropleth
map.std.residual(county.gg, county.data)
map.std.residual <- function(county.gg, county.data){
# use the function above to generate the data frame with information about std.residual
new.data <- find.std.residual(county.data, county.data$violent.crimes, 0.01)
# merge the violent crime information with the map file
county.mapdata <- merge(county.gg, new.data, by.x = 'fips', by.y='STCOU')
# make the mapg
ggplot(data = county.mapdata, mapping=aes(x = long, y = lat, group = group, fill = std.residual)) +
# add boundries across counties
geom_polygon(color = 'white', size = 0.5) +
scale_fill_gradient2(low = 'blue', mid = 'grey', high = 'red', midpoint = 0) +
coord_map() +
labs(title = 'Risk of Violent Crime over counties \n United States', x = '', y = '') +
# make the title in the middle of the graph
theme(plot.title = element_text(hjust = 0.5))
}
# generate the choropleth
map.std.residual(county.gg, county.data)
map.std.residual <- function(county.gg, county.data){
# use the function above to generate the data frame with information about std.residual
new.data <- find.std.residual(county.data, county.data$violent.crimes, 0.01)
# merge the violent crime information with the map file
county.mapdata <- merge(county.gg, new.data, by.x = 'fips', by.y='STCOU')
# make the mapg
ggplot(data = county.mapdata, mapping=aes(x = long, y = lat, group = group, fill = std.residual)) +
# add boundries across counties
geom_polygon(color = 'white', size = 0.5) +
scale_fill_gradient2(low = 'navy', mid = 'grey', high = 'red', midpoint = 0) +
coord_map() +
labs(title = 'Risk of Violent Crime over counties \n United States', x = '', y = '') +
# make the title in the middle of the graph
theme(plot.title = element_text(hjust = 0.5))
}
# generate the choropleth
map.std.residual(county.gg, county.data)
map.std.residual <- function(county.gg, county.data){
# Let's use the function earlier:
new.data <- find.std.residual(county.data, county.data$violent.crimes, 0.01)
# merge the violent crime information with the map file
county.mapdata <- merge(county.gg, new.data, by.x = 'fips', by.y='STCOU')
# Now, plot the map using the long for longitude and lat for latitude from county.gg dataframe:
ggplot(data = county.mapdata, mapping=aes(x = long, y = lat, group = group, fill = std.residual)) +
geom_polygon(color = 'white', size = 0.5) +
scale_fill_gradient2(low = 'navy', mid = 'grey', high = 'red', midpoint = 0) +
coord_map() +
labs(title = 'Risk of Violent Crime over counties \n United States 2007', x = '', y = '') +
theme(plot.title = element_text(hjust = 0.5))
}
# Finally, generate the choropleth:
map.std.residual(county.gg, county.data)
map.std.residual <- function(county.gg, county.data){
# Let's use the function earlier:
new.data <- find.std.residual(county.data, county.data$violent.crimes, 0.01)
# merge the violent crime information with the map file
county.mapdata <- merge(county.gg, new.data, by.x = 'fips', by.y='STCOU')
# Now, plot the map using the long for longitude and lat for latitude from county.gg dataframe:
ggplot(data = county.mapdata, mapping=aes(x = long, y = lat, group = group, fill = std.residual)) +
geom_polygon(color = 'white', size = 0.5) +
scale_fill_gradient2(low = 'navy', mid = 'grey', high = 'red', midpoint = 0) +
coord_map() +
labs(title = 'Risk of Violent Crime per counties \n United States 2007', x = '', y = '') +
theme(plot.title = element_text(hjust = 0.5))
}
# Finally, generate the choropleth:
map.std.residual(county.gg, county.data)
US.crime.rate = sum(county.data$violent.crimes)/sum(county.data$population)
new.map.std.residual <- function(county.gg, county.data){
# use the function above to generate the data frame with information about std.residual by US crime rates
US.crime <- find.std.residual(county.data, county.data$violent.crimes, US.crime.rate)
# merge the violent crime information with the map file
county.mapdata <- merge(county.gg, US.crime, by.x = 'fips', by.y='STCOU')
# make the map
ggplot(data = county.mapdata, mapping=aes(x = long, y = lat, group = group, fill = std.residual)) +
# add boundries across counties
geom_polygon(color = 'white', size = 0.5) +
scale_fill_gradient2(low = 'blue', mid = 'grey', high = 'red', midpoint = 0) +
coord_map() +
labs(title = 'Risk of Violent Crime over counties \n United States', x = '', y = '') +
# make the title in the middle of the graph
theme(plot.title = element_text(hjust = 0.5))
}
# generate the choropleth
new.map.std.residual(county.gg, county.data)
US.crime.rate = sum(county.data$violent.crimes)/sum(county.data$population)
new.map.std.residual <- function(county.gg, county.data){
# Let's use the function earlier and use the violent.crimes as our variable and US.crime.rate as null hyphotesis:
US.crime <- find.std.residual(county.data, county.data$violent.crimes, US.crime.rate)
# Let's merge the county.gg and US.crime to get the longitude and latitude for our map:
county.mapdata <- merge(county.gg, US.crime, by.x = 'fips', by.y='STCOU')
# Finally, make the choropleth plot:
ggplot(data = county.mapdata, mapping=aes(x = long, y = lat, group = group, fill = std.residual)) +
geom_polygon(color = 'white', size = 0.5) +
scale_fill_gradient2(low = 'blue', mid = 'grey', high = 'red', midpoint = 0) +
coord_map() +
labs(title = 'Figure 6: Risk of Violent Crime over counties \n United States 2007', x = '', y = '') +
theme(plot.title = element_text(hjust = 0.5))
}
new.map.std.residual(county.gg, county.data)
