number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Add labels to the bars
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 3)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Add labels to the bars
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 4)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Add labels to the bars
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 2)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Add labels to the bars
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 3)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Add labels to the bars
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# take average of mpg$speed, save as variable
avg.speed = mean(cars$speed)
avg.speed
library(plyr)
library(knitr) # for the kable() function, which prints data frames as tables:
# group the chickens by diet and take average weight
avg.weights = ddply(ChickWeight, "Diet", summarize, avg.weight = mean(weight))
# display the data frame as an easy-to-read table, with 3 significant digits
kable(avg.weights, digits = 3, col.names = c('Diet', 'Average Weight'))
# Let's import the dataset_hw1 that we need and name it expenditures.
expenditures = read.csv(file='dataset_hw1.csv', header=TRUE, sep=',')
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# Let's create an if-else condition to identify rows that is not black or white in column race.ref.person then change them to "others".
expenditures$race.ref.person = factor(ifelse(expenditures$race.ref.person %in% c("black", "white"), expenditures$race.ref.person, "others"), label = c("black", "white", "others"))
# Let's create a table consisting of race available in our data set.
race_table <- table(expenditures$race.ref.person)
# Next, let's display the table using kable:
kable(race_table, col.names = c("Race", "Total"))
# First, let's use the if-else condition to find NA values within the region in expenditures dataset, then change each to a workable NA as character.
expenditures$region <- ifelse(is.na(expenditures$region), "NA", as.character(expenditures$region))
# general.pop: Let's create the data frame for our general population for each region.
general.pop <- as.data.frame(prop.table(table(expenditures$region)) * 100) # Note that I multiplied the result by 100 to present it as percentage.
# Let's name the columns Region and general.pop.
names(general.pop) <- c("Region", "general.pop")
#rich.pop: Next, Let's create the data frame for our rich population for each region.
rich.pop <- as.data.frame(prop.table(table(expenditures$region[expenditures$income.rank > 0.96])) * 100)# Note that I multiplied the result by 100 to present it as percentage.
# Let's also name the columns Region and rich.pop.
names(rich.pop) <- c("Region", "rich.pop")
# Finally, let us merge the 2 data frames we created. And we're going to call it df_region.data.
df_region.data <- merge(general.pop, rich.pop, by = "Region", all = TRUE)
# We can now display the data frame using kable function. We're going to name the 3 columngs Region, General Population, and Rich Population for easy readability.
kable(df_region.data, digits = 3, col.names = c("Region", "General Population", "Rich Population"))
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 3)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 5)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 4)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 2)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# take average of mpg$speed, save as variable
avg.speed = mean(cars$speed)
avg.speed
library(plyr)
library(knitr) # for the kable() function, which prints data frames as tables:
# group the chickens by diet and take average weight
avg.weights = ddply(ChickWeight, "Diet", summarize, avg.weight = mean(weight))
# display the data frame as an easy-to-read table, with 3 significant digits
kable(avg.weights, digits = 3, col.names = c('Diet', 'Average Weight'))
# Let's import the dataset_hw1 that we need and name it expenditures.
expenditures = read.csv(file='dataset_hw1.csv', header=TRUE, sep=',')
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# Let's create an if-else condition to identify rows that is not black or white in column race.ref.person then change them to "others".
expenditures$race.ref.person = factor(ifelse(expenditures$race.ref.person %in% c("black", "white"), expenditures$race.ref.person, "others"), label = c("black", "white", "others"))
# Let's create a table consisting of race available in our data set.
race_table <- table(expenditures$race.ref.person)
# Next, let's display the table using kable:
kable(race_table, col.names = c("Race", "Total"))
# First, let's use the if-else condition to find NA values within the region in expenditures dataset, then change each to a workable NA as character.
expenditures$region <- ifelse(is.na(expenditures$region), "NA", as.character(expenditures$region))
# general.pop: Let's create the data frame for our general population for each region.
general.pop <- as.data.frame(prop.table(table(expenditures$region)) * 100) # Note that I multiplied the result by 100 to present it as percentage.
# Let's name the columns Region and general.pop.
names(general.pop) <- c("Region", "general.pop")
#rich.pop: Next, Let's create the data frame for our rich population for each region.
rich.pop <- as.data.frame(prop.table(table(expenditures$region[expenditures$income.rank > 0.96])) * 100)# Note that I multiplied the result by 100 to present it as percentage.
# Let's also name the columns Region and rich.pop.
names(rich.pop) <- c("Region", "rich.pop")
# Finally, let us merge the 2 data frames we created. And we're going to call it df_region.data.
df_region.data <- merge(general.pop, rich.pop, by = "Region", all = TRUE)
# We can now display the data frame using kable function. We're going to name the 3 columngs Region, General Population, and Rich Population for easy readability.
kable(df_region.data, digits = 3, col.names = c("Region", "General Population", "Rich Population"))
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# Create a pie chart
pie(fraction_tpr, labels = sprintf("%s %.2f%%", names(fraction_tpr), fraction_tpr), col = rainbow(length(fraction_tpr)))
# Add a legend
legend("topright", legend = names(fraction_tpr), fill = rainbow(length(fraction_tpr)), cex = 0.8)
# take average of mpg$speed, save as variable
avg.speed = mean(cars$speed)
avg.speed
library(plyr)
library(knitr) # for the kable() function, which prints data frames as tables:
# group the chickens by diet and take average weight
avg.weights = ddply(ChickWeight, "Diet", summarize, avg.weight = mean(weight))
# display the data frame as an easy-to-read table, with 3 significant digits
kable(avg.weights, digits = 3, col.names = c('Diet', 'Average Weight'))
# Let's import the dataset_hw1 that we need and name it expenditures.
expenditures = read.csv(file='dataset_hw1.csv', header=TRUE, sep=',')
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# Create a pie chart
pie(fraction_tpr, labels = sprintf("%s %.2f%%", names(fraction_tpr), fraction_tpr), col = rainbow(length(fraction_tpr)))
# Add a legend
legend("topright", legend = names(fraction_tpr), fill = rainbow(length(fraction_tpr)), cex = 0.8)
# Let's create an if-else condition to identify rows that is not black or white in column race.ref.person then change them to "others".
expenditures$race.ref.person = factor(ifelse(expenditures$race.ref.person %in% c("black", "white"), expenditures$race.ref.person, "others"), label = c("black", "white", "others"))
# Let's create a table consisting of race available in our data set.
race_table <- table(expenditures$race.ref.person)
# Next, let's display the table using kable:
kable(race_table, col.names = c("Race", "Total"))
# First, let's use the if-else condition to find NA values within the region in expenditures dataset, then change each to a workable NA as character.
expenditures$region <- ifelse(is.na(expenditures$region), "NA", as.character(expenditures$region))
# general.pop: Let's create the data frame for our general population for each region.
general.pop <- as.data.frame(prop.table(table(expenditures$region)) * 100) # Note that I multiplied the result by 100 to present it as percentage.
# Let's name the columns Region and general.pop.
names(general.pop) <- c("Region", "general.pop")
#rich.pop: Next, Let's create the data frame for our rich population for each region.
rich.pop <- as.data.frame(prop.table(table(expenditures$region[expenditures$income.rank > 0.96])) * 100)# Note that I multiplied the result by 100 to present it as percentage.
# Let's also name the columns Region and rich.pop.
names(rich.pop) <- c("Region", "rich.pop")
# Finally, let us merge the 2 data frames we created. And we're going to call it df_region.data.
df_region.data <- merge(general.pop, rich.pop, by = "Region", all = TRUE)
# We can now display the data frame using kable function. We're going to name the 3 columngs Region, General Population, and Rich Population for easy readability.
kable(df_region.data, digits = 3, col.names = c("Region", "General Population", "Rich Population"))
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
par(mfrow = c(1, 2))  # 1 row, 2 columns
# Create a pie chart
pie(fraction_tpr, labels = sprintf("%s %.2f%%", names(fraction_tpr), fraction_tpr), col = rainbow(length(fraction_tpr)))
# Add a legend
legend("topright", legend = names(fraction_tpr), fill = rainbow(length(fraction_tpr)), cex = 0.8)
# Restore default layout
par(mfrow = c(1, 1))
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
dotchart(fraction_tpr, labels = sprintf("%.2f%%", fraction_tpr), cex = 0.8,
main = "Percentage per Race", xlab = "Total Percentage", pch = 19)
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# take average of mpg$speed, save as variable
avg.speed = mean(cars$speed)
avg.speed
library(plyr)
library(knitr) # for the kable() function, which prints data frames as tables:
# group the chickens by diet and take average weight
avg.weights = ddply(ChickWeight, "Diet", summarize, avg.weight = mean(weight))
# display the data frame as an easy-to-read table, with 3 significant digits
kable(avg.weights, digits = 3, col.names = c('Diet', 'Average Weight'))
# Let's import the dataset_hw1 that we need and name it expenditures.
expenditures = read.csv(file='dataset_hw1.csv', header=TRUE, sep=',')
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# Let's create an if-else condition to identify rows that is not black or white in column race.ref.person then change them to "others".
expenditures$race.ref.person = factor(ifelse(expenditures$race.ref.person %in% c("black", "white"), expenditures$race.ref.person, "others"), label = c("black", "white", "others"))
# Let's create a table consisting of race available in our data set.
race_table <- table(expenditures$race.ref.person)
# Next, let's display the table using kable:
kable(race_table, col.names = c("Race", "Total"))
# First, let's use the if-else condition to find NA values within the region in expenditures dataset, then change each to a workable NA as character.
expenditures$region <- ifelse(is.na(expenditures$region), "NA", as.character(expenditures$region))
# general.pop: Let's create the data frame for our general population for each region.
general.pop <- as.data.frame(prop.table(table(expenditures$region)) * 100) # Note that I multiplied the result by 100 to present it as percentage.
# Let's name the columns Region and general.pop.
names(general.pop) <- c("Region", "general.pop")
#rich.pop: Next, Let's create the data frame for our rich population for each region.
rich.pop <- as.data.frame(prop.table(table(expenditures$region[expenditures$income.rank > 0.96])) * 100)# Note that I multiplied the result by 100 to present it as percentage.
# Let's also name the columns Region and rich.pop.
names(rich.pop) <- c("Region", "rich.pop")
# Finally, let us merge the 2 data frames we created. And we're going to call it df_region.data.
df_region.data <- merge(general.pop, rich.pop, by = "Region", all = TRUE)
# We can now display the data frame using kable function. We're going to name the 3 columngs Region, General Population, and Rich Population for easy readability.
kable(df_region.data, digits = 3, col.names = c("Region", "General Population", "Rich Population"))
# Let's create an if-else condition to identify rows that is not black or white in column race.ref.person then change them to "others".
expenditures$race.ref.person = factor(ifelse(expenditures$race.ref.person %in% c("black", "white"), expenditures$race.ref.person, "others"), label = c("black", "white", "others"))
# Let's create a table consisting of race available in our data set.
race_table <- table(expenditures$race.ref.person)
# Next, let's display the table using kable:
kable(race_table, col.names = c("Race", "Total"))
# Add labels
text(x = barplot(race_table, main = "", xlab = "", ylab = "", col = rainbow(length(race_table))),
y = race_table + 1, labels = race_table, pos = 3)
# Add legend
legend("topright", legend = levels(expenditures$race.ref.person), fill = rainbow(length(race_table)), cex = 0.8)
# Let's create an if-else condition to identify rows that is not black or white in column race.ref.person then change them to "others".
expenditures$race.ref.person = factor(ifelse(expenditures$race.ref.person %in% c("black", "white"), expenditures$race.ref.person, "others"), label = c("black", "white", "others"))
# Let's create a table consisting of race available in our data set.
race_table <- table(expenditures$race.ref.person)
# Next, let's display the table using kable:
kable(race_table, col.names = c("Race", "Total"))
# Add labels
text(x = barplot(race_table, main = "", xlab = "", ylab = "", col = rainbow(length(race_table))),
y = race_table + 1, labels = race_table, pos = 1)
# Add legend
legend("topright", legend = levels(expenditures$race.ref.person), fill = rainbow(length(race_table)), cex = 0.8)
# take average of mpg$speed, save as variable
avg.speed = mean(cars$speed)
avg.speed
library(plyr)
library(knitr) # for the kable() function, which prints data frames as tables:
# group the chickens by diet and take average weight
avg.weights = ddply(ChickWeight, "Diet", summarize, avg.weight = mean(weight))
# display the data frame as an easy-to-read table, with 3 significant digits
kable(avg.weights, digits = 3, col.names = c('Diet', 'Average Weight'))
# Let's import the dataset_hw1 that we need and name it expenditures.
expenditures = read.csv(file='dataset_hw1.csv', header=TRUE, sep=',')
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
bars_race(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# take average of mpg$speed, save as variable
avg.speed = mean(cars$speed)
avg.speed
library(plyr)
library(knitr) # for the kable() function, which prints data frames as tables:
# group the chickens by diet and take average weight
avg.weights = ddply(ChickWeight, "Diet", summarize, avg.weight = mean(weight))
# display the data frame as an easy-to-read table, with 3 significant digits
kable(avg.weights, digits = 3, col.names = c('Diet', 'Average Weight'))
# Let's import the dataset_hw1 that we need and name it expenditures.
expenditures = read.csv(file='dataset_hw1.csv', header=TRUE, sep=',')
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# Let's create an if-else condition to identify rows that is not black or white in column race.ref.person then change them to "others".
expenditures$race.ref.person = factor(ifelse(expenditures$race.ref.person %in% c("black", "white"), expenditures$race.ref.person, "others"), label = c("black", "white", "others"))
# Let's create a table consisting of race available in our data set.
race_table <- table(expenditures$race.ref.person)
# Next, let's display the table using kable:
kable(race_table, col.names = c("Race", "Total"))
# Let's also create a bar graph for better visualization.
text(x = barplot(race_table, main = "", xlab = "", ylab = "", col = rainbow(length(race_table))),
y = race_table + 1, labels = race_table, pos = 1)
# Legends
legend("topright", legend = levels(expenditures$race.ref.person), fill = rainbow(length(race_table)), cex = 0.8)
# First, let's use the if-else condition to find NA values within the region in expenditures dataset, then change each to a workable NA as character.
expenditures$region <- ifelse(is.na(expenditures$region), "NA", as.character(expenditures$region))
# general.pop: Let's create the data frame for our general population for each region.
general.pop <- as.data.frame(prop.table(table(expenditures$region)) * 100) # Note that I multiplied the result by 100 to present it as percentage.
# Let's name the columns Region and general.pop.
names(general.pop) <- c("Region", "general.pop")
#rich.pop: Next, Let's create the data frame for our rich population for each region.
rich.pop <- as.data.frame(prop.table(table(expenditures$region[expenditures$income.rank > 0.96])) * 100)# Note that I multiplied the result by 100 to present it as percentage.
# Let's also name the columns Region and rich.pop.
names(rich.pop) <- c("Region", "rich.pop")
# Finally, let us merge the 2 data frames we created. And we're going to call it df_region.data.
df_region.data <- merge(general.pop, rich.pop, by = "Region", all = TRUE)
# We can now display the data frame using kable function. We're going to name the 3 columngs Region, General Population, and Rich Population for easy readability.
kable(df_region.data, digits = 3, col.names = c("Region", "General Population", "Rich Population"))
# First, let's use the if-else condition to find NA values within the region in expenditures dataset, then change each to a workable NA as character.
expenditures$region <- ifelse(is.na(expenditures$region), "NA", as.character(expenditures$region))
# general.pop: Let's create the data frame for our general population for each region.
general.pop <- as.data.frame(prop.table(table(expenditures$region)) * 100) # Note that I multiplied the result by 100 to present it as percentage.
# Let's name the columns Region and general.pop.
names(general.pop) <- c("Region", "general.pop")
#rich.pop: Next, Let's create the data frame for our rich population for each region.
rich.pop <- as.data.frame(prop.table(table(expenditures$region[expenditures$income.rank > 0.96])) * 100)# Note that I multiplied the result by 100 to present it as percentage.
# Let's also name the columns Region and rich.pop.
names(rich.pop) <- c("Region", "rich.pop")
# Finally, let us merge the 2 data frames we created. And we're going to call it df_region.data.
df_region.data <- merge(general.pop, rich.pop, by = "Region", all = TRUE)
# We can now display the data frame using kable function. We're going to name the 3 columngs Region, General Population, and Rich Population for easy readability.
kable(df_region.data, digits = 3, col.names = c("Region", "General Population", "Rich Population"))
# Extract the relevant columns
regions <- df_region.data$Region
general_pop <- df_region.data$general.pop
rich_pop <- df_region.data$rich.pop
# Set up colors for the bars
colors <- c("lightblue", "lightgreen")
# Create a bar graph
barplot(
height = cbind(general_pop, rich_pop),
beside = TRUE,
col = colors,
names.arg = regions,
legend.text = c("General Population", "Rich Population"),
main = "Population Distribution by Region",
ylab = "Percentage",
cex.names = 0.8
)
# First, let's use the if-else condition to find NA values within the region in expenditures dataset, then change each to a workable NA as character.
expenditures$region <- ifelse(is.na(expenditures$region), "NA", as.character(expenditures$region))
# general.pop: Let's create the data frame for our general population for each region.
general.pop <- as.data.frame(prop.table(table(expenditures$region)) * 100) # Note that I multiplied the result by 100 to present it as percentage.
# Let's name the columns Region and general.pop.
names(general.pop) <- c("Region", "general.pop")
#rich.pop: Next, Let's create the data frame for our rich population for each region.
rich.pop <- as.data.frame(prop.table(table(expenditures$region[expenditures$income.rank > 0.96])) * 100)# Note that I multiplied the result by 100 to present it as percentage.
# Let's also name the columns Region and rich.pop.
names(rich.pop) <- c("Region", "rich.pop")
# Finally, let us merge the 2 data frames we created. And we're going to call it df_region.data.
df_region.data <- merge(general.pop, rich.pop, by = "Region", all = TRUE)
# We can now display the data frame using kable function. We're going to name the 3 columngs Region, General Population, and Rich Population for easy readability.
kable(df_region.data, digits = 3, col.names = c("Region", "General Population", "Rich Population"))
# take average of mpg$speed, save as variable
avg.speed = mean(cars$speed)
avg.speed
library(plyr)
library(knitr) # for the kable() function, which prints data frames as tables:
# group the chickens by diet and take average weight
avg.weights = ddply(ChickWeight, "Diet", summarize, avg.weight = mean(weight))
# display the data frame as an easy-to-read table, with 3 significant digits
kable(avg.weights, digits = 3, col.names = c('Diet', 'Average Weight'))
# Let's import the dataset_hw1 that we need and name it expenditures.
expenditures = read.csv(file='dataset_hw1.csv', header=TRUE, sep=',')
# First, let's get the total number per race.
number_per_race <- table(expenditures$race.ref.person)
# Let us now get the fraction of the total number per race and multiply it by 100 for percentage.
fraction_tpr <- prop.table(number_per_race) * 100
# Finally, using kable, let's display the percentage per race.
kable(fraction_tpr, digits = 3, col.names = c("Race", "Total Percentage"))
# Let's create a bar graph for better visualization.
text(x = barplot(fraction_tpr, main = "Percentage per Race",
xlab = "Race", ylab = "Total Percentage", col = "skyblue"),
y = fraction_tpr + 1, labels = sprintf("%.2f%%", fraction_tpr), pos = 1)
# Let's create an if-else condition to identify rows that is not black or white in column race.ref.person then change them to "others".
expenditures$race.ref.person = factor(ifelse(expenditures$race.ref.person %in% c("black", "white"), expenditures$race.ref.person, "others"), label = c("black", "white", "others"))
# Let's create a table consisting of race available in our data set.
race_table <- table(expenditures$race.ref.person)
# Next, let's display the table using kable:
kable(race_table, col.names = c("Race", "Total"))
# Let's also create a bar graph for better visualization.
text(x = barplot(race_table, main = "", xlab = "", ylab = "", col = rainbow(length(race_table))),
y = race_table + 1, labels = race_table, pos = 1)
# Legends
legend("topright", legend = levels(expenditures$race.ref.person), fill = rainbow(length(race_table)), cex = 0.8)
# First, let's use the if-else condition to find NA values within the region in expenditures dataset, then change each to a workable NA as character.
expenditures$region <- ifelse(is.na(expenditures$region), "NA", as.character(expenditures$region))
# general.pop: Let's create the data frame for our general population for each region.
general.pop <- as.data.frame(prop.table(table(expenditures$region)) * 100) # Note that I multiplied the result by 100 to present it as percentage.
# Let's name the columns Region and general.pop.
names(general.pop) <- c("Region", "general.pop")
#rich.pop: Next, Let's create the data frame for our rich population for each region.
rich.pop <- as.data.frame(prop.table(table(expenditures$region[expenditures$income.rank > 0.96])) * 100)# Note that I multiplied the result by 100 to present it as percentage.
# Let's also name the columns Region and rich.pop.
names(rich.pop) <- c("Region", "rich.pop")
# Finally, let us merge the 2 data frames we created. And we're going to call it df_region.data.
df_region.data <- merge(general.pop, rich.pop, by = "Region", all = TRUE)
# We can now display the data frame using kable function. We're going to name the 3 columngs Region, General Population, and Rich Population for easy readability.
kable(df_region.data, digits = 3, col.names = c("Region", "General Population", "Rich Population"))
install.packages("ggplot2")
install.packages("reshape2")
